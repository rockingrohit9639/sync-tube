generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  YOUTUBER
  EDITOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole

  projectsCreated     Project[]    @relation(name: "ProjectAdmin")
  projectsJoined      Project[]    @relation(name: "ProjectMembers")
  videosUploaded      Video[]
  uploadedFiles       File[]
  sentInvitations     Invitation[] @relation(name: "SentInvitations")
  receivedInvitations Invitation[] @relation(name: "ReceivedInvitations")
  comments            Comment[]    @relation(name: "CommentsCreated")
  seenComments        Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProjectStatus {
  ONGOING
  DONE
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
}

model Project {
  id          String             @id @default(cuid())
  name        String
  description String
  deadline    DateTime?
  isArchive   Boolean?           @default(false)
  archivedOn  DateTime?
  status      ProjectStatus      @default(ONGOING)
  visibility  ProjectVisibility? @default(PRIVATE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  admin          User         @relation(fields: [adminId], references: [id], onDelete: Cascade, name: "ProjectAdmin")
  adminId        String
  members        User[]       @relation(name: "ProjectMembers")
  videosUploaded Video[]
  invitations    Invitation[]
}

enum VideoStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUIRED
}

model Video {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      VideoStatus @default(PENDING)
  seenByAdmin Boolean     @default(false)
  url         String
  uploadedAt  DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  uploadedBy   User    @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById String
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String

  file     File?     @relation(fields: [fileId], references: [id])
  fileId   String?   @unique
  comments Comment[]
}

model File {
  id           String @id @default(cuid())
  originalName String
  mimetype     String
  filename     String
  size         Int
  path         String

  uploadedBy   User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById String

  video Video?
}

model Invitation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Who invided?
  inviter   User   @relation(name: "SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId String

  // Whom is invited?
  invitee   User   @relation(name: "ReceivedInvitations", fields: [inviteeId], references: [id], onDelete: Cascade)
  inviteeId String

  // On which project the user is invided?
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  createdBy   User    @relation(name: "CommentsCreated", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  video       Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     String?
  seenBy      User[]
}
